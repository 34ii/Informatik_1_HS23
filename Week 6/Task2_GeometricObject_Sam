from abc import ABC, abstractmethod


class GeometricObject(ABC):

    def __init__(self, color, filled):
        self.color = color
        self.filled = filled

    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def volume(self):
        pass


-------------------------------------------------


from task.geometric_object import GeometricObject
from math import pi

class Cube(GeometricObject):
    def __init__(self, side_length, color, filled):
        self.side_length = side_length
        super().__init__(color, filled)

    def area(self):
        return round((self.side_length ** 2) * 6, 2)

    def volume(self):
        return round(self.side_length ** 3, 2)


-----------------------------------------------



from task.geometric_object import GeometricObject
from math import pi

class Cylinder(GeometricObject):
    def __init__(self, radius, height, color, filled):
        self.radius = radius
        self.height = height
        super().__init__(color, filled)

    def area(self):
        return round(((2 * pi * self.radius ** 2)+(2 * pi * self.radius * self.height)), 2)

    def volume(self):
        return round(pi * self.radius ** 2 * self.height, 2)



----------------------------------------------------



from task.geometric_object import GeometricObject
from math import pi


class Cone(GeometricObject):
    def __init__(self, radius, vertical_height, slant_height, color, filled):
        self.radius = radius
        self.vertical_height = vertical_height
        self.slant_height = slant_height
        super().__init__(color, filled)

    def area(self):
        return round(((pi * self.radius ** 2)+(pi * self.radius * self.slant_height)), 2)

    def volume(self):
        return round((pi * self.radius ** 2 * self.vertical_height / 3), 2)
