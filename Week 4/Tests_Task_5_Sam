#!/usr/bin/env python3
import os
from unittest import TestCase

from task import script

# You'll probably want to write at least two tests for each of the functions,
# one passing a valid and one passing an invalid value to confirm that each
# individual function works on its own.

# Here' we've already provided a few examples. You should be able to fill
# in the empty strings by yourself by studying the task description:

IPv4_OCTET = "255"
IPv4_OCTET_INVALID = "256"

IPv4 = "127.0.0.1"                 # fill this in yourself
IPv4_INVALID = "300.0.0.1"         # fill this in yourself

IPv6_HEXTET = "ff3"
IPv6_HEXTET_INVALID = "65536"  # fill this in yourself

IPv6 = "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
IPv6_INVALID = "2001:0db8:85a3:0:0000:8a2e:0370:7334:1234"         # fill this in yourself

IP = "192.168.1.1"
IP_INVALID = "A string that is not a valid IP"


class TasksTestSuite(TestCase):

    # we already provide 2 tests for the first two examples (valid/invalid octet)
    def test_ipv4_octet_valid(self):
        actual = script.is_valid_IPv4_octet(IPv4_OCTET)
        self.assertEqual(actual, True)

    def test_ipv4_octet_invalid(self):
        actual = script.is_valid_IPv4_octet(IPv4_OCTET_INVALID)
        self.assertEqual(actual, False)

    # write more test cases, one for each of the examples above!
    
    def test_ipv4_valid(self):
        actual = script.is_valid_IPv4(IPv4)
        self.assertEqual(actual, True)

    def test_ipv4_invalid(self):
        actual = script.is_valid_IPv4(IPv4_INVALID)
        self.assertEqual(actual, False)

    def test_ipv6_hextet_valid(self):
        actual = script.is_valid_IPv6_hextet(IPv6_HEXTET)
        self.assertEqual(actual, True)

    def test_ipv6_hextet_invalid(self):
        actual = script.is_valid_IPv6_hextet(IPv6_HEXTET_INVALID)
        self.assertEqual(actual, False)

    def test_ipv6_valid(self):
        actual = script.is_valid_IPv6(IPv6)
        self.assertEqual(actual, True)

    def test_ipv6_invalid(self):
        actual = script.is_valid_IPv6(IPv6_INVALID)
        self.assertEqual(actual, False) 

    """hier beginngen die anderen tests"""    
    
    def test_is_valid_IPv4(self):
        actual = script.is_valid_IPv4("127.0.0.1")
        m = "@@Valid IPv4 address falsely identified as invalid@@"
        self.assertEqual(True, actual, m)

    def test_invalid_IPv4(self):
        actual = script.is_valid_IPv4("300.0.0.1")
        m = "@@Invalid IPv4 address falsely identified as valid@@"
        self.assertEqual(False, actual, m)

    def test_is_valid_range(self):
        actual = script.is_valid_IPv4_octet("255")
        m = "@@Valid IPv4 octet falsely identified as invalid@@"
        self.assertEqual(True, actual, m)

    def test_lower_invalid_range(self):
        actual = script.is_valid_IPv4_octet("-1")
        m = "@@Out of range IPv4 octet not identified as invalid@@"
        self.assertEqual(False, actual, m)

    def test_higher_invalid_range(self):
        actual = script.is_valid_IPv4_octet("300")
        m = "@@Out of range IPv4 octet not identified as invalid@@"
        self.assertEqual(False, actual, m)

    def test_valid_IPv6_substring_value(self):
        actual = script.is_valid_IPv6_hextet("fff")
        m = "@@Valid IPv6 hextet falsely identified as invalid@@"
        self.assertEqual(True, actual, m)

    def test_higher_invalid_IPv6_substring_value(self):
        actual = script.is_valid_IPv6_hextet("fffff")
        m = "@@Invalid IPv6 hextet falsely identified as valid@@"
        self.assertEqual(False, actual, m)

    def test_lower_invalid_IPv6_substring_value(self):
        actual = script.is_valid_IPv6_hextet("-1")
        m = "@@Out of range IPv6 hextet not identified as invalid@@"
        self.assertEqual(False, actual, m)

    def test_is_valid_IPv6(self):
        actual = script.is_valid_IPv6("2001:0db8:85a3:0000:0000:8a2e:0370:7334")
        m = "@@Valid IPv6 address falsely identified as invalid@@"
        self.assertEqual(True, actual, m)

    def test_invalid_IPv6(self):
        actual = script.is_valid_IPv6("2001:0db8:85a3:0000:0000:8a2e:0370:7334:7334")
        m = "@@Invalid IPv6 address falsely identified as valid@@"
        self.assertEqual(False, actual, m)
